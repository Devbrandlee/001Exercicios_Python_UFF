# Problema A: Esfera 

# Fa√ßa um programa que calcule e mostre o volume de uma esfera sendo fornecido o valor 
# de seu raio (R). A f√≥rmula para calcular o volume √©: (4/3) * pi * ùëÖ3. Considere (atribua) 
# para pi o valor 3.14159. 
# Dica: Ao utilizar a f√≥rmula, procure usar (4/3.0) ou (4.0/3), pois algumas linguagens 
# (dentre elas o C++), assumem que o resultado da divis√£o entre dois inteiros √© outro inteiro. 
# Entrada 
# O arquivo de entrada cont√©m um valor de ponto flutuante (dupla precis√£o), 
# correspondente ao raio da esfera. 
# Sa√≠da 
# A sa√≠da dever√° ser uma mensagem "VOLUME" conforme o exemplo fornecido abaixo, 
# com um espa√ßo antes e um espa√ßo depois da igualdade. O valor dever√° ser apresentado 
# com 3 casas ap√≥s o ponto. 


raio = float(input())
calcVolume = (4.0/3) * 3.14159 * raio * raio * raio

print(f"VOLUME = {calcVolume:.3f}")

#Deixar o c√≥dio mais limpo calculando o raio ao cubo evitando raio*raio*raio

#resultado = base ** expoente

#print(2 ** 2)  # 2¬≤ = 4
#print(2 ** 3)  # 2¬≥ = 8
#print(2 ** 4)  # 2‚Å¥ = 16
#print(2 ** 5)  # 2‚Åµ = 32
#print(2 ** 6)  # 2‚Å∂ = 64
#print(2 ** 7)  # 2‚Å∑ = 128
#Isso funciona para qualquer n√∫mero, inclusive n√∫meros negativos e fra√ß√µes.

raio = float(input())
calcVolume = (4.0/3) * 3.14159 * raio ** 3

print(f"VOLUME = {calcVolume:.3f}")

#ou

raio = float(input())
calcVolume = (4.0 / 3) * 3.14159 * pow(raio, 3)

print(f"VOLUME = {calcVolume:.3f}")

# Alternativa com pow()
# Outra forma de fazer isso √© usando a fun√ß√£o pow(base, expoente), que faz a mesma coisa:



# print(pow(2, 3))  # 2¬≥ = 8
# print(pow(3, 4))  # 3‚Å¥ = 81
# Ent√£o, sempre que precisar elevar um n√∫mero a uma pot√™ncia (como 2, 3, 4, 5, etc.), voc√™ pode usar ** ou pow()
